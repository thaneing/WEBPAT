
@{



    ViewData["Title"] = "Purchase Order Report";
    ViewData["Tab"] = "<ol class='breadcrumb'>"
    + "<li>"
    + "<a href='../../Home/Index'>Home</a>"
    + "</li>"

    + "<li class='active'>"
    + "<a>" + @ViewData["Title"] + "</a>"
    + "</li>"
    + "</ol>";
}


<style>

    input.empty {
        font-family: FontAwesome;
        font-style: normal;
        font-weight: normal;
        text-decoration: inherit;
    }





    th {
        font-size: 0.7vw;
    }

    td {
        font-size: 0.7vw;
    }
</style>


@*<div class="col-xs-12 col-sm-12  col-md-12 col-lg-12">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <h5>@ViewData["Title"] </h5>
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                <div class="row">

                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Document No : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column1_search" />

                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Vendor No. : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column2_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Vendor Name : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column3_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Item No. : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column4_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Item Desc : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column5_search" />
                        </div>
                    </div>

                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Item Desc2 : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column6_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Location : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column7_search" />
                        </div>
                    </div>

                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Unit : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column9_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By Group : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column15_search" />
                        </div>
                    </div>
                    <div class="col-lg-4 col-xs-6">
                        <label>Search By CostCode : </label>
                        <div class="form-group">
                            <input type="text" class="form-control" id="column16_search" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>*@


<div class="col-xs-12 col-sm-12  col-md-12 col-lg-12">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@ViewData["Title"] </h5>
            <div class="ibox-tools">
                <a class="collapse-link">
                    <i class="fa fa-chevron-up"></i>
                </a>
                <a class="close-link">
                    <i class="fa fa-times"></i>
                </a>
            </div>
        </div>
        <div class="ibox-content">
            <div class="row">

                <div class="col-lg-2">
                    <div class="form-group">
                        <label>หน่วยงาน : </label>

                        @{
                            int countlist = ViewBag.CountSource + 1;
                            string[] statuses = new string[countlist];
                            int i = 0;
                            foreach (string city in ViewBag.SourceAutoCompletes)
                            {
                                if (i == 0)
                                {
                                    statuses[i] = "All";
                                    i = 1;
                                }

                                statuses[i] = city;
                                i++;
                            }


                        }
                        @(Html.DevExtreme().SelectBox()
        .DataSource(statuses)
        .Value(statuses[0])
        .OnValueChanged(@<text>
                    function(data) {
                    var dataGrid = $("#gridContainer").dxDataGrid("instance");
                    if (data.value == "All")
                    dataGrid.clearFilter();
                    else
                    dataGrid.filter(["Location", "=", data.value]);
                    }
        </text>)
                        )
                    </div>
                </div>





            </div>



        </div>
    </div>
</div>


<div class="col-xs-12 col-sm-12  col-md-12 col-lg-12">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@ViewData["Title"]</h5>
            <div class="ibox-tools">
                <a class="collapse-link">
                    <i class="fa fa-chevron-up"></i>
                </a>
                <a class="close-link">
                    <i class="fa fa-times"></i>
                </a>
            </div>
        </div>
        <div class="ibox-content">
            <div class="table-responsive">

           
                @(Html.DevExtreme().DataGrid<V_OrderPurchaseLine>()
                      .ID("gridContainer")
                      .ShowBorders(true)
                      .FilterPanel(f => f.Visible(true))
                     .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
                        //.Paging(paging => paging.Enabled(false))
                      .DataSource(d => d.Mvc().Controller("PurchaseOrder").LoadAction("Get"))
                      .Columns(columns =>
                      {
                          columns.AddFor(m => m.OrderDate).Caption("Date").Width(100);
                          columns.AddFor(m => m.DocumentNo).Caption("Doc.No").Width(150);
                          columns.AddFor(m => m.VendorNo).Caption("Ven.No").Width(70);
                          columns.AddFor(m => m.VendorName).Caption("Vendor").Width(250);
                          columns.AddFor(m => m.ItemNo).Caption("Item No.").Width(100);
                          columns.AddFor(m => m.Description).Caption("Desc").Width(250);
                          columns.AddFor(m => m.Description2).Caption("Desc2").Width(250);
                          columns.AddFor(m => m.Location).Caption("Site").Width(80);
                          columns.AddFor(m => m.Quantity).Caption("Qty").Format(Format.FixedPoint).Width(100);
                          columns.AddFor(m => m.UnitOfMeasure).Caption("UM").Width(50);
                          columns.AddFor(m => m.Amount).Caption("AMT").Format(Format.FixedPoint).Width(100);
                          columns.AddFor(m => m.Receive).Format(Format.FixedPoint).Width(100);
                          columns.AddFor(m => m.TotalReceive).Format(Format.FixedPoint).Width(100);
                          columns.AddFor(m => m.UnitCost).Format(Format.FixedPoint).Width(100);

                          columns.AddFor(m => m.InventoryPostingGroupName).GroupIndex(0);
                          columns.AddFor(m => m.JobTaskNo);

                      })
                      //.FilterBuilderPopup(p =>
                      //  p.Position(pos =>
                      //      pos.At(HorizontalAlignment.Center, VerticalAlignment.Top)
                      //          .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                      //          .Offset(0, 10)
                      //  )
                      //)
                      .ColumnChooser(c => c.Enabled(true))
                      .LoadPanel(p => p.Enabled(true))
                      .FilterRow(f => f.Visible(true))
                      //.ColumnHidingEnabled(true)
                      .HeaderFilter(f => f.Visible(true))
                      .GroupPanel(p => p.Visible(true))
                      .Grouping(g => g.AutoExpandAll(false))
                      .RemoteOperations(true)
                      .OnCellPrepared("cellPrepared")
                      .Export(e => e.Enabled(true).CustomizeExcelCell("customizeExcelCell"))



                       .Summary(s => s.GroupItems(items =>
                       {
                           items.AddFor(m => m.TotalReceive)
                               .SummaryType(SummaryType.Sum)
                               .ValueFormat(Format.FixedPoint)
                               .ShowInGroupFooter(false)
                               .AlignByColumn(true)
                               .DisplayFormat("{0}");

                           items.AddFor(m => m.Amount)
                               .SummaryType(SummaryType.Sum)
                               .ValueFormat(Format.FixedPoint)
                               .ShowInGroupFooter(false)
                               .AlignByColumn(true)
                               .DisplayFormat("{0}");

                           items.AddFor(m => m.Quantity)
                               .SummaryType(SummaryType.Sum)
                               .ValueFormat(Format.FixedPoint)
                               .ShowInGroupFooter(false)
                               .DisplayFormat("{0}")
                               .AlignByColumn(true);

                           items.AddFor(m => m.Receive)
                               .SummaryType(SummaryType.Sum)
                               .ValueFormat(Format.FixedPoint)
                               .ShowInGroupFooter(false)
                               .AlignByColumn(true)
                               .DisplayFormat("{0}");
                       })
                          //.Summary(s => s.TotalItems(totalItems =>
                          //    {
                          //        totalItems.AddFor(m => m.TotalReceive).SummaryType(SummaryType.Sum).ValueFormat(Format.FixedPoint);
                          //        totalItems.AddFor(m => m.Amount).SummaryType(SummaryType.Sum).ValueFormat(Format.FixedPoint);
                          //        totalItems.AddFor(m => m.Receive).SummaryType(SummaryType.Sum).ValueFormat(Format.FixedPoint);
                          //        totalItems.AddFor(m => m.Quantity).SummaryType(SummaryType.Sum).ValueFormat(Format.FixedPoint);



                          //  })



                          .GroupItems(groupItems =>
                          {
                              groupItems.Add().SummaryType(SummaryType.Count);

                          })

                      )
                        //.OnToolbarPreparing("toolbar_preparing")
                )




                @*<table id='example' class="table table-striped table-bordered table-hover dataTables-example">
                        <thead>
                            <tr>

                                <th align='center'>Order Date.</th>
                                <th align='center'>Doc. Name</th>
                                <th align='center'>Ven. No</th>
                                <th align='center'>Ven. Name</th>
                                <th align='center'>Itm. No</th>
                                <th align='center'>Desc.</th>
                                <th align='center'>Desc2.</th>
                                <th align='center'>Location</th>
                                <th align='center'>Qty</th>

                                <th align='center'>Unit</th>
                                <th align='center'>Amount</th>
                                <th align='center'>Recive</th>
                                <th align='center'>Recive AMT.</th>
                                <th align='center'>UnitCost</th>
                                <th align='center'>Ref. PR</th>
                                <th align='center'>Group</th>
                                <th align='center'>CostCode</th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <td style="text-align:right" colspan="7"></td>

                                <td style="text-align:right"></td>
                                <td style="text-align:right"></td>
                                <td style="text-align:right"></td>
                                <td style="text-align:right"></td>
                                <td style="text-align:right"></td>
                                <td style="text-align:right"></td>
                                <td colspan="4"></td>

                            </tr>
                        </tfoot>

                    </table>*@
            </div>
        </div>
    </div>
</div>


@section Scripts {




    <script>


       // $("body").addClass('mini-navbar');
       // SmoothlyMenu();

        $("body").addClass('mini-navbar');
        SmoothlyMenu();
        $("body").addClass('fixed-sidebar');
        $('.sidebar-collapse').slimScroll({
            height: '100%',
            railOpacity: 0.9
        });


        function cellPrepared(e) {
            if (e.rowType === 'data') {
                if (e.data.OrderDate < new Date(2014, 2, 3)) {
                    e.cellElement.css({ color: '#AAAAAA' });
                }
                if (e.data.SaleAmount > 15000) {
                    if (e.column.dataField === 'OrderNumber') {
                        e.cellElement.css({ 'font-weight': 'bold' });
                    }
                    if (e.column.dataField === 'SaleAmount') {
                        e.cellElement.css({ 'background-color': '#FFBB00', color: '#000000' });
                    }
                }
            }

            if (e.rowType === 'group') {
                if (e.row.groupIndex === 0) {
                    e.cellElement.css({ 'background-color': '#BEDFE6', 'color': '#000' });
                }
                if (e.row.groupIndex === 1) {
                    e.cellElement.css({ 'background-color': '#C9ECD7', 'color': '#000' });
                }
                e.cellElement.children().css({ 'color': '#000' });
            }

            if (e.rowType === 'groupFooter' && e.column.dataField === 'SaleAmount') {
                e.cellElement.css({ 'font-style': 'italic' });
            }
        }

        function customizeExcelCell(options) {
            var gridCell = options.gridCell;
            if (!gridCell) {
                return;
            }

            if (gridCell.rowType === 'data') {
                if (gridCell.data.OrderDate < new Date(2014, 2, 3)) {
                    options.font.color = '#AAAAAA';
                }
                if (gridCell.data.SaleAmount > 15000) {
                    if (gridCell.column.dataField === 'OrderNumber') {
                        options.font.bold = true;
                    }
                    if (gridCell.column.dataField === 'SaleAmount') {
                        options.backgroundColor = '#FFBB00';
                        options.font.color = '#000000';
                    }
                }
            }

            if (gridCell.rowType === 'group') {
                if (gridCell.groupIndex === 0) {
                    options.backgroundColor = '#BEDFE6';
                }
                if (gridCell.groupIndex === 1) {
                    options.backgroundColor = '#C9ECD7';
                }
                if (gridCell.column.dataField === 'Employee') {
                    options.value = gridCell.value + " (" + gridCell.groupSummaryItems[0].value + " items)";
                    options.font.bold = false;
                }
                if (gridCell.column.dataField === 'SaleAmount') {
                    options.value = gridCell.groupSummaryItems[0].value;
                    options.numberFormat = "&quot;Max: &quot;$0.00";
                }
            }

            if (gridCell.rowType === 'groupFooter' && gridCell.column.dataField === 'SaleAmount') {
                options.value = options.gridCell.value;
                options.numberFormat = "&quot;Sum: &quot;$0.00";
                options.font.italic = true;
            }

            if (gridCell.rowType === 'totalFooter' && gridCell.column.dataField === 'SaleAmount') {
                options.value = options.gridCell.value;
                options.numberFormat = "&quot;Total Sum: &quot;$0.00";
            }
        }
    </script>



    <script>
                //        $('#dtp1,#dtp2').datetimepicker({
                //            format: 'DD/MM/YYYY',
                //        });


                //            //var StartDate1 = document.getElementById("StartDate1").value;
                //            //var StartDate2 = document.getElementById("StartDate2").value;
                //            var dataType = 'application/json; charset=utf-8';
                //            table = $('#example').DataTable({
                //                destroy: true,
                //                columnDefs:
                //                    [
                //                        {
                //                            targets: 8,
                //                            className: 'dt-body-right'
                //                        },
                //                         {
                //                            targets: 10,
                //                            className: 'dt-body-right'
                //                        },
                //                         {
                //                            targets: 11,
                //                            className: 'dt-body-right'
                //                        },
                //                         {
                //                            targets: 12,
                //                            className: 'dt-body-right'
                //                        },
                //                         {
                //                            targets: 13,
                //                            className: 'dt-body-right'
                //                        }
                //                    ],


                //                "language": {
                //                    "decimal": ".",
                //                    "thousands": ","
                //                },
                //                "order": [[2, "desc"]],
                //                "pageLength": 25,
                //                //"searching": false,
                //                //responsive: true,
                //                //fixedHeader: true,

                //                dom: 'Bfrtip',
                //                buttons: [
                //                    //{
                //                    //    extend: 'colvis',
                //                    //    text: '<i class="fa fa-eye"></i> ซ่อน/แสดง',
                //                    //    //messageTop: "รายงาน PV&AP : " + StartDate1 + "-" + StartDate2,
                //                    //    titleAttr: 'Hide',
                //                    //    postfixButtons: ['colvisRestore']
                //                    //},
                //                    {
                //                        extend: 'pdfHtml5',
                //                        text: '<i class="fa fa-file-pdf-o"></i> PDF',
                //                        titleAttr: 'PDF',
                //                        pageSize: 'A4',   // ขนาดหน้ากระดาษเป็น A4
                //                        //orientation: 'landscape',
                //                        //messageTop: "รายงาน WHT03 :  " + StartDate1 + "-" + StartDate2,
                //                        customize: function (doc) {
                //                            doc.defaultStyle = {
                //                                font: 'THSarabun',
                //                                fontSize: '12',

                //                            };
                //                            var now = new Date();
                //                            var jsDate = now.getDate() + '-' + (now.getMonth() + 1) + '-' + now.getFullYear();
                //                            doc['footer'] = (function (page, pages) {
                //                                return {
                //                                    columns:
                //                                        [
                //                                            {
                //                                                alignment: 'center',
                //                                                text: ['Created on: ', { text: jsDate.toString() }]
                //                                            },
                //                                            {
                //                                                alignment: 'right',
                //                                                text: ['page ', { text: page.toString() }, ' of ', { text: pages.toString() }]
                //                                            }
                //                                        ],
                //                                    margin: 10
                //                                }
                //                            });
                //                        }
                //                    },
                //                    {
                //                        extend: 'excelHtml5',
                //                        text: '<i class="fa fa-file-excel-o"></i> Excel',
                //                        titleAttr: 'Excel',
                //                        //messageTop: "รายงาน WHT03 :  " + StartDate1 + "-" + StartDate2,
                //                        autoFilter: true
                //                    },
                //                    {
                //                        extend: 'copyHtml5',
                //                        text: '<i class="fa fa-files-o"></i> Copy',
                //                        titleAttr: 'Copy'

                //                    },
                //                    {
                //                        text: 'JSON',
                //                        action: function (e, dt, button, config) {
                //                            var data = dt.buttons.exportData();
                //                            $.fn.dataTable.fileSave(
                //                                new Blob([JSON.stringify(data)]),
                //                                'Export.json'
                //                            );
                //                        }
                //                    }
                //                ],
                //                "ajax": {
                //                    "url": "/PurchaseOrder/GetData/",
                //                    "contentType": dataType,
                //                    "type": "GET",
                //                    "data": function (response) {
                //                        return JSON.stringify(response.data);
                //                    }

                //                },

                //                "columns": [


                //                    { "data": "OrderDate" },
                //                    { "data": "DocumentNo" },
                //                    { "data": "VendorNo" },
                //                    { "data": "VendorName" },
                //                    { "data": "ItemNo" },
                //                    { "data": "Description" },
                //                    { "data": "Description2" },
                //                    { "data": "Location" },
                //                    { "data": "Quantity",render: $.fn.dataTable.render.number(',', '.', 2, '') },
                //                    { "data": "UnitOfMeasure" },
                //                    { "data": "Amount",render: $.fn.dataTable.render.number(',', '.', 2, '') },
                //                    { "data": "Receive",render: $.fn.dataTable.render.number(',', '.', 2, '') },
                //                    { "data": "TotalReceive",render: $.fn.dataTable.render.number(',', '.', 2, '')},
                //                    { "data": "UnitCost",render: $.fn.dataTable.render.number(',', '.', 2, '') },
                //                    { "data": "RefPR" },
                //                    { "data": "InventoryPostingGroupName" },
                //                    { "data": "JobTaskNo"}
                //                ],
                //              "footerCallback": function (row, data, start, end, display) {
                //                    var api = this.api(), data;
                //                    // converting to interger to find total
                //                    var intVal = function (i) {
                //                        return typeof i === 'string' ?
                //                            i.replace(/[\$,]/g, '') * 1 :
                //                            typeof i === 'number' ?
                //                                i : 0;
                //                    };



                //                              // computing column Total the complete result
                //                    var TotalQty = api
                //                        .column(8, {filter:'applied'})
                //                        .data()
                //                        .reduce(function (a, b) {
                //                            return intVal(a) + intVal(b);
                //                        }, 0);

                //                                      // computing column Total the complete result
                //                    var TotalRecieve = api
                //                        .column(10, {filter:'applied'})
                //                        .data()
                //                        .reduce(function (a, b) {
                //                            return intVal(a) + intVal(b);
                //                        }, 0);


                //                                      // computing column Total the complete result
                //                    var TotalAmount = api
                //                        .column(11, {filter:'applied'})
                //                        .data()
                //                        .reduce(function (a, b) {
                //                            return intVal(a) + intVal(b);
                //                        }, 0);
                //                    var TotalReceict = api
                //                        .column(12, {filter:'applied'})
                //                        .data()
                //                        .reduce(function (a, b) {
                //                            return intVal(a) + intVal(b);
                //                        }, 0);



                //                  $(api.column(0).footer()).html('Total');
                //                  $(api.column(8).footer()).html(TotalQty.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,'));
                //                  $(api.column(10).footer()).html(TotalRecieve.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,'));
                //                  $(api.column(11).footer()).html(TotalAmount.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,'));
                //                  $(api.column(12).footer()).html(TotalReceict.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,'));
                //                }

                //            });

                //    $('#column1_search').on('keyup', function () {
                //        table
                //            .columns(1)
                //            .search(this.value)
                //            .draw();
                //    });
                //    // #column0_search is a <input type="text"> element
                //    $('#column2_search').on('keyup', function () {
                //        table
                //            .columns(2)
                //            .search(this.value)
                //            .draw();
                //    });
                //                    // #column0_search is a <input type="text"> element
                //    $('#column3_search').on('keyup', function () {
                //        table
                //            .columns(3)
                //            .search(this.value)
                //            .draw();
                //    });

                //    $('#column4_search').on('keyup', function () {
                //        table
                //            .columns(4)
                //            .search(this.value)
                //            .draw();
                //    });
                //    // #column0_search is a <input type="text"> element
                //    $('#column5_search').on('keyup', function () {
                //        table
                //            .columns(5)
                //            .search(this.value)
                //            .draw();
                //    });
                //                    // #column0_search is a <input type="text"> element
                //    $('#column6_search').on('keyup', function () {
                //        table
                //            .columns(6)
                //            .search(this.value)
                //            .draw();
                //    });
                //       $('#column7_search').on('keyup', function () {
                //        table
                //            .columns(7)
                //            .search(this.value)
                //            .draw();
                //    });
                //    // #column0_search is a <input type="text"> element
                //    $('#column9_search').on('keyup', function () {
                //        table
                //            .columns(9)
                //            .search(this.value)
                //            .draw();
                //    });
                //                    // #column0_search is a <input type="text"> element
                //    $('#column15_search').on('keyup', function () {
                //        table
                //            .columns(15)
                //            .search(this.value)
                //            .draw();
                //    });

                //    // #column0_search is a <input type="text"> element
                //    $('#column16_search').on('keyup', function () {
                //        table
                //            .columns(16)
                //            .search(this.value)
                //            .draw();
                //    });

                //        // Setup - add a text input to each footer cell
                //$('#example thead tr').clone(true).appendTo( '#example thead' );
                //$('#example thead tr:eq(1) th').each( function (i) {
                //    var title = $(this).text();
                //    $(this).html( '<input type="text" placeholder="&#xF002;" style="width:100%;font-family:Arial, FontAwesome;"/>' );

                //    $( 'input', this ).on( 'keyup change', function () {
                //        if ( table.column(i).search() !== this.value ) {
                //            table
                //                .column(i)
                //                .search( this.value )
                //                .draw();
                //        }
                //    });
                //});


    </script>





}

